# -*- coding: utf-8 -*-
"""
시간표 작성 다이얼로그
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QComboBox, QMessageBox, QGroupBox,
                             QTableWidget, QTableWidgetItem, QHeaderView,
                             QProgressBar, QFrame, QScrollArea, QDialog,
                             QDialogButtonBox, QFileDialog, QInputDialog)
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtGui import QColor, QBrush, QFont
from datetime import datetime, timedelta, time
import random
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from database.db_manager import DatabaseManager


class TimetableCreateDialog(QWidget):
    """시간표 작성 위젯"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.db = DatabaseManager()
        self.selected_course = None
        self.subjects = []
        self.holidays = set()
        self.subject_colors = {}
        self.current_timetable = []  # 현재 표시 중인 시간표
        self.timetable_id = None  # 저장된 시간표 ID
        self.init_ui()
        self.load_courses()
        
    def init_ui(self):
        """UI 초기화"""
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # 과정 선택
        course_group = QGroupBox("📚 과정 선택")
        course_group.setStyleSheet("QGroupBox { font-size: 11pt; font-weight: bold; padding-top: 10px; }")
        course_layout = QHBoxLayout()
        
        self.course_combo = QComboBox()
        self.course_combo.setMinimumHeight(32)
        self.course_combo.setStyleSheet("font-size: 11pt;")
        self.course_combo.currentIndexChanged.connect(self.on_course_selected)
        course_layout.addWidget(self.course_combo)
        
        self.course_info_label = QLabel("과정을 선택하세요")
        self.course_info_label.setStyleSheet("font-size: 11pt; color: #666;")
        course_layout.addWidget(self.course_info_label)
        course_layout.addStretch()
        
        course_group.setLayout(course_layout)
        layout.addWidget(course_group)
        
        # 과목 목록
        subject_group = QGroupBox("📋 과목 목록")
        subject_group.setStyleSheet("QGroupBox { font-size: 11pt; font-weight: bold; padding-top: 10px; }")
        subject_layout = QVBoxLayout()
        
        self.subject_table = QTableWidget()
        self.subject_table.setColumnCount(7)
        self.subject_table.setHorizontalHeaderLabels([
            "과목명", "시수", "일수", "주강사", "보조강사", "예비강사", "색상"
        ])
        self.subject_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        # 6개 행이 보이도록 높이 설정 (헤더 30px + 행 6개 * 30px = 210px)
        self.subject_table.setFixedHeight(210)
        self.subject_table.setStyleSheet("font-size: 11pt;")
        subject_layout.addWidget(self.subject_table)
        
        subject_group.setLayout(subject_layout)
        layout.addWidget(subject_group)
        
        # 자동 배정 버튼
        btn_layout = QHBoxLayout()
        
        self.auto_btn = QPushButton("🎯 자동 배정")
        self.auto_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 10px 20px; font-size: 11pt;")
        self.auto_btn.setMinimumHeight(40)
        self.auto_btn.clicked.connect(self.auto_assign)
        self.auto_btn.setEnabled(False)
        btn_layout.addWidget(self.auto_btn)
        
        self.save_btn = QPushButton("💾 저장")
        self.save_btn.setStyleSheet("background-color: #2196F3; color: white; padding: 10px 20px; font-size: 11pt;")
        self.save_btn.setMinimumHeight(40)
        self.save_btn.clicked.connect(self.save_timetable)
        self.save_btn.setEnabled(False)
        btn_layout.addWidget(self.save_btn)
        
        self.export_btn = QPushButton("📥 Excel 다운로드")
        self.export_btn.setStyleSheet("padding: 10px 20px; font-size: 11pt;")
        self.export_btn.setMinimumHeight(40)
        self.export_btn.clicked.connect(self.export_excel)
        self.export_btn.setEnabled(False)
        btn_layout.addWidget(self.export_btn)
        
        self.import_btn = QPushButton("📤 Excel 업로드")
        self.import_btn.setStyleSheet("padding: 10px 20px; font-size: 11pt;")
        self.import_btn.setMinimumHeight(40)
        self.import_btn.clicked.connect(self.import_excel)
        btn_layout.addWidget(self.import_btn)
        
        self.delete_btn = QPushButton("🗑️ 삭제")
        self.delete_btn.setStyleSheet("background-color: #F44336; color: white; padding: 10px 20px; font-size: 11pt;")
        self.delete_btn.setMinimumHeight(40)
        self.delete_btn.clicked.connect(self.delete_timetable)
        self.delete_btn.setEnabled(False)
        btn_layout.addWidget(self.delete_btn)
        
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        
        # 진행률 표시
        self.progress = QProgressBar()
        self.progress.setStyleSheet("font-size: 11pt;")
        self.progress.setVisible(False)
        layout.addWidget(self.progress)
        
        # 시간표 테이블
        timetable_group = QGroupBox("📅 생성된 시간표")
        timetable_group.setStyleSheet("QGroupBox { font-size: 11pt; font-weight: bold; padding-top: 10px; }")
        timetable_layout = QVBoxLayout()
        
        # 스크롤 영역
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setMinimumHeight(400)
        
        self.timetable_table = QTableWidget()
        self.timetable_table.setColumnCount(8)
        self.timetable_table.setHorizontalHeaderLabels([
            "주차", "날짜", "오전(09:00-13:00)", "오후(14:00-18:00)", "주강사", "보조강사", "예비강사", "진행도"
        ])
        self.timetable_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.timetable_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.timetable_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.Stretch)
        self.timetable_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
        self.timetable_table.setStyleSheet("font-size: 11pt;")
        self.timetable_table.cellClicked.connect(self.on_cell_clicked)
        
        scroll.setWidget(self.timetable_table)
        timetable_layout.addWidget(scroll)
        
        timetable_group.setLayout(timetable_layout)
        layout.addWidget(timetable_group)
        
        self.setLayout(layout)
    
    def load_courses(self):
        """과정 목록 로드"""
        try:
            if self.db.connect():
                query = "SELECT code, name, start_date FROM courses ORDER BY start_date DESC"
                courses = self.db.fetch_all(query)
                
                self.course_combo.clear()
                self.course_combo.addItem("-- 과정 선택 --", None)
                
                for course in courses:
                    display_text = f"{course['code']} - {course['name']}"
                    if course.get('start_date'):
                        display_text += f" ({course['start_date'].strftime('%Y-%m-%d')})"
                    self.course_combo.addItem(display_text, course['code'])
                    
        except Exception as e:
            QMessageBox.critical(self, "오류", f"과정 목록 로드 실패: {str(e)}")
    
    def on_course_selected(self, index):
        """과정 선택 시"""
        if index <= 0:
            self.selected_course = None
            self.auto_btn.setEnabled(False)
            self.course_info_label.setText("과정을 선택하세요")
            return
        
        course_code = self.course_combo.itemData(index)
        self.selected_course = course_code
        self.load_course_info()
        self.load_subjects()
        self.load_holidays()
        self.auto_btn.setEnabled(True)
    
    def load_course_info(self):
        """과정 정보 로드"""
        try:
            query = """
                SELECT start_date, lecture_end_date, lecture_hours 
                FROM courses 
                WHERE code = %s
            """
            result = self.db.fetch_one(query, (self.selected_course,))
            
            if result:
                info = f"시작: {result['start_date'].strftime('%Y-%m-%d')}"
                if result.get('lecture_end_date'):
                    info += f" ~ {result['lecture_end_date'].strftime('%Y-%m-%d')}"
                info += f" | 총 {result['lecture_hours']}시간"
                self.course_info_label.setText(info)
                
        except Exception as e:
            print(f"과정 정보 로드 오류: {str(e)}")
    
    def load_subjects(self):
        """과목 목록 로드"""
        try:
            query = """
                SELECT s.code, s.name, s.hours, 
                       i1.name as main_instructor_name,
                       i2.name as assistant_instructor_name,
                       i3.name as reserve_instructor_name
                FROM subjects s
                LEFT JOIN instructors i1 ON s.main_instructor = i1.code
                LEFT JOIN instructors i2 ON s.assistant_instructor = i2.code
                LEFT JOIN instructors i3 ON s.reserve_instructor = i3.code
                ORDER BY s.hours ASC
            """
            self.subjects = self.db.fetch_all(query)
            
            self.subject_table.setRowCount(len(self.subjects))
            
            # 과목별 색상 생성
            self.subject_colors = {}
            colors = self.generate_colors(len(self.subjects))
            
            for i, subject in enumerate(self.subjects):
                # 과목명
                self.subject_table.setItem(i, 0, QTableWidgetItem(subject['name']))
                
                # 시수
                hours = subject['hours']
                self.subject_table.setItem(i, 1, QTableWidgetItem(f"{hours}시간"))
                
                # 일수 (1일 8시간 기준, 소수점 1자리)
                days = hours / 8.0
                self.subject_table.setItem(i, 2, QTableWidgetItem(f"{days:.1f}일"))
                
                # 주강사
                main_instructor = subject.get('main_instructor_name') or '-'
                self.subject_table.setItem(i, 3, QTableWidgetItem(main_instructor))
                
                # 보조강사
                assistant_instructor = subject.get('assistant_instructor_name') or '-'
                self.subject_table.setItem(i, 4, QTableWidgetItem(assistant_instructor))
                
                # 예비강사
                reserve_instructor = subject.get('reserve_instructor_name') or '-'
                self.subject_table.setItem(i, 5, QTableWidgetItem(reserve_instructor))
                
                # 색상 (파스텔 톤)
                color = colors[i]
                self.subject_colors[subject['code']] = color
                color_item = QTableWidgetItem()
                color_item.setBackground(QBrush(color))
                self.subject_table.setItem(i, 6, color_item)
                
        except Exception as e:
            QMessageBox.critical(self, "오류", f"과목 로드 실패: {str(e)}")
    
    def load_holidays(self):
        """공휴일 로드"""
        try:
            query = "SELECT holiday_date FROM holidays"
            rows = self.db.fetch_all(query)
            self.holidays = set([row['holiday_date'] for row in rows])
        except Exception as e:
            print(f"공휴일 로드 오류: {str(e)}")
    
    def generate_colors(self, count):
        """과목별 고유 파스텔 색상 생성"""
        colors = []
        hue_step = 360 / count
        
        for i in range(count):
            hue = int(i * hue_step)
            # 파스텔 색상 (채도 40%, 밝기 95%)
            color = QColor.fromHsv(hue, int(255 * 0.4), int(255 * 0.95))
            colors.append(color)
        
        return colors
    
    def auto_assign(self):
        """자동 시간표 배정"""
        if not self.selected_course or not self.subjects:
            QMessageBox.warning(self, "경고", "과정과 과목을 먼저 선택하세요.")
            return
        
        try:
            self.progress.setVisible(True)
            self.progress.setValue(0)
            
            # 과정 정보 가져오기
            query = "SELECT start_date, lecture_end_date FROM courses WHERE code = %s"
            course = self.db.fetch_one(query, (self.selected_course,))
            
            if not course or not course.get('start_date'):
                QMessageBox.warning(self, "경고", "과정 시작일이 설정되지 않았습니다.")
                return
            
            start_date = course['start_date']
            end_date = course.get('lecture_end_date') or start_date + timedelta(days=100)
            
            # 시간표 생성
            self.current_timetable = self.create_timetable(start_date, end_date)
            
            # 테이블에 표시
            self.display_timetable(self.current_timetable)
            
            self.progress.setValue(100)
            self.progress.setVisible(False)
            
            self.save_btn.setEnabled(True)
            self.export_btn.setEnabled(True)
            
            QMessageBox.information(self, "완료", "시간표가 자동으로 생성되었습니다.")
            
        except Exception as e:
            self.progress.setVisible(False)
            QMessageBox.critical(self, "오류", f"시간표 생성 실패: {str(e)}")
    
    def _make_subject_entry(self, subject, hours):
        """과목 엔트리 생성 헬퍼"""
        return {
            'code': subject['code'],
            'name': subject['name'],
            'total_hours': subject['hours'],
            'main_instructor': subject.get('main_instructor_name', '-'),
            'assistant_instructor': subject.get('assistant_instructor_name', '-'),
            'reserve_instructor': subject.get('reserve_instructor_name', '-'),
            'hours': hours
        }
    
    def _find_most_remaining(self, remaining):
        """가장 시수 많이 남은 과목 찾기"""
        max_h = 0
        best = None
        for s in self.subjects:
            h = remaining.get(s['code'], 0)
            if h > max_h:
                max_h = h
                best = s
        return best
    
    def create_timetable(self, start_date, end_date):
        """시간표 생성 알고리즘 - 간단 명확 버전
        
        규칙:
        1. 1일 1과목 (오전 4h + 오후 4h = 하루 8h)
        2. 다음날은 다른 과목
        3. 금요일은 시수 적은 2개 과목 격주
        4. 오전 완료 시 → 오후는 가장 시수 많이 남은 과목
        5. 금요일 과목도 빈 자리 가능
        """
        timetable = []
        
        # 남은 시수
        remaining = {s['code']: s['hours'] for s in self.subjects}
        
        # 시수가 적은 과목 2개 (금요일 격주 배정용)
        sorted_subjects = sorted(self.subjects, key=lambda x: x['hours'])
        friday_subjects = [sorted_subjects[0]['code'], sorted_subjects[1]['code']] if len(sorted_subjects) >= 2 else []
        friday_week = 0
        
        current_date = start_date
        current_subject_index = 2 if len(sorted_subjects) > 2 else 0  # 금요일 과목 제외
        carry_over_subject = None  # 오전에 끝난 과목 다음에 올 과목
        
        while current_date <= end_date and any(h > 0 for h in subject_remaining.values()):
            # 주말 제외
            if current_date.weekday() >= 5:
                current_date += timedelta(days=1)
                continue
            
            # 공휴일 제외
            if current_date in self.holidays:
                current_date += timedelta(days=1)
                continue
            
            am_subject = None
            pm_subject = None
            
            # carry_over가 있으면 오전에 사용
            if carry_over_subject:
                # 오전에 이월된 과목 시작
                subject = carry_over_subject
                subject_code = subject['code']
                remaining = subject_remaining[subject_code]
                
                am_hours = min(4, remaining)
                am_subject = {
                    'code': subject_code,
                    'name': subject['name'],
                    'total_hours': subject['hours'],
                    'main_instructor': subject.get('main_instructor_name') or '-',
                    'assistant_instructor': subject.get('assistant_instructor_name') or '-',
                    'reserve_instructor': subject.get('reserve_instructor_name') or '-',
                    'hours': am_hours
                }
                subject_remaining[subject_code] -= am_hours
                
                # 오후 처리
                if subject_remaining[subject_code] >= 4:
                    # 아직 4시간 이상 남음 - 오후에도 같은 과목
                    pm_subject = am_subject.copy()
                    pm_subject['hours'] = 4
                    subject_remaining[subject_code] -= 4
                    carry_over_subject = None  # 다음날은 새 과목
                else:
                    # 4시간 미만 남음 또는 완료 - 오후에 가장 시수가 많이 남은 과목
                    carry_over_subject = None
                    current_subject_index += 1
                    
                    # 가장 시수가 많이 남은 과목 찾기
                    max_remaining = 0
                    next_subj = None
                    
                    for subj in self.subjects:
                        remaining = subject_remaining.get(subj['code'], 0)
                        if remaining > max_remaining:
                            max_remaining = remaining
                            next_subj = subj
                    
                    if next_subj and max_remaining > 0:
                        next_code = next_subj['code']
                        
                        if subject_remaining.get(next_code, 0) > 0:
                            pm_subject = {
                                'code': next_code,
                                'name': next_subj['name'],
                                'total_hours': next_subj['hours'],
                                'main_instructor': next_subj.get('main_instructor_name') or '-',
                                'assistant_instructor': next_subj.get('assistant_instructor_name') or '-',
                                'reserve_instructor': next_subj.get('reserve_instructor_name') or '-',
                                'hours': 4
                            }
                            subject_remaining[next_code] -= 4
                            
                            # 이 과목을 다음날 오전에 계속 사용
                            carry_over_subject = next_subj
                            # 인덱스도 업데이트
                            current_subject_index = sorted_subjects.index(next_subj) + 1
            
            # 금요일 특별 처리 (금요일 과목이 남아있을 때만)
            elif current_date.weekday() == 4 and friday_subjects and any(subject_remaining.get(code, 0) > 0 for code in friday_subjects):
                # 금요일 과목 중 남은 시수가 있는 것 찾기
                friday_subject_code = None
                for _ in range(len(friday_subjects)):
                    test_code = friday_subjects[friday_week % len(friday_subjects)]
                    friday_week += 1
                    if subject_remaining.get(test_code, 0) > 0:
                        friday_subject_code = test_code
                        break
                
                # 금요일 과목이 남아있으면 우선 배정
                if friday_subject_code:
                    subject_code = friday_subject_code
                # 금요일 과목이 모두 완료되면 평일 과목 배정
                else:
                    # 가장 시수가 많이 남은 과목 찾기
                    max_remaining = 0
                    subject_code = None
                    for subj in self.subjects:
                        remaining = subject_remaining.get(subj['code'], 0)
                        if remaining > max_remaining:
                            max_remaining = remaining
                            subject_code = subj['code']
                
                if subject_code and subject_remaining.get(subject_code, 0) > 0:
                    subject = next((s for s in self.subjects if s['code'] == subject_code), None)
                    if subject:
                        remaining = subject_remaining[subject_code]
                        
                        # 오전 배정
                        am_hours = min(4, remaining)
                        am_subject = {
                            'code': subject_code,
                            'name': subject['name'],
                            'total_hours': subject['hours'],
                            'main_instructor': subject.get('main_instructor_name') or '-',
                            'assistant_instructor': subject.get('assistant_instructor_name') or '-',
                            'reserve_instructor': subject.get('reserve_instructor_name') or '-',
                            'hours': am_hours
                        }
                        subject_remaining[subject_code] -= am_hours
                        
                        # 오후 처리
                        if subject_remaining[subject_code] >= 4:
                            # 오후에도 같은 과목 (1일 1과목 원칙)
                            pm_subject = am_subject.copy()
                            pm_subject['hours'] = 4
                            subject_remaining[subject_code] -= 4
                        elif subject_remaining[subject_code] > 0:
                            # 4시간 미만 남음 - 오후에도 같은 과목 (남은 시수만큼)
                            pm_subject = am_subject.copy()
                            pm_subject['hours'] = subject_remaining[subject_code]
                            subject_remaining[subject_code] = 0
                        else:
                            # 오전에 완료 - 오후에 다음 과목 시작
                            # 다음 과목 찾기 (금요일 과목 제외)
                            attempts = 0
                            while attempts < len(self.subjects):
                                if current_subject_index >= len(sorted_subjects):
                                    current_subject_index = 0
                                
                                next_subj = sorted_subjects[current_subject_index]
                                next_code = next_subj['code']
                                
                                if next_code in friday_subjects:
                                    current_subject_index += 1
                                    attempts += 1
                                    continue
                                
                                if subject_remaining.get(next_code, 0) > 0:
                                    pm_subject = {
                                        'code': next_code,
                                        'name': next_subj['name'],
                                        'total_hours': next_subj['hours'],
                                        'main_instructor': next_subj.get('main_instructor_name') or '-',
                                        'assistant_instructor': next_subj.get('assistant_instructor_name') or '-',
                                        'reserve_instructor': next_subj.get('reserve_instructor_name') or '-',
                                        'hours': 4
                                    }
                                    subject_remaining[next_code] -= 4
                                    break
                                
                                current_subject_index += 1
                                attempts += 1
            
            # 일반 평일 - 1일 1과목 원칙
            else:
                # 현재 과목 찾기 (금요일 과목도 포함)
                attempts = 0
                while attempts < len(self.subjects):
                    if current_subject_index >= len(sorted_subjects):
                        current_subject_index = 0
                    
                    subject = sorted_subjects[current_subject_index]
                    subject_code = subject['code']
                    remaining = subject_remaining.get(subject_code, 0)
                    
                    if remaining > 0:
                        # 오전 배정
                        am_hours = min(4, remaining)
                        am_subject = {
                            'code': subject_code,
                            'name': subject['name'],
                            'total_hours': subject['hours'],
                            'main_instructor': subject.get('main_instructor_name') or '-',
                            'assistant_instructor': subject.get('assistant_instructor_name') or '-',
                            'reserve_instructor': subject.get('reserve_instructor_name') or '-',
                            'hours': am_hours
                        }
                        subject_remaining[subject_code] -= am_hours
                        
                        # 오후 처리
                        if subject_remaining[subject_code] >= 4:
                            # 오후에도 같은 과목 (1일 1과목 원칙)
                            pm_subject = am_subject.copy()
                            pm_subject['hours'] = 4
                            subject_remaining[subject_code] -= 4
                            # 다음날은 다른 과목
                            current_subject_index += 1
                        elif subject_remaining[subject_code] > 0:
                            # 4시간 미만 남음 - 오후에도 같은 과목
                            pm_subject = am_subject.copy()
                            pm_subject['hours'] = subject_remaining[subject_code]
                            subject_remaining[subject_code] = 0
                            # 다음날은 다른 과목
                            current_subject_index += 1
                        else:
                            # 오전에 완료 - 오후에 가장 시수가 많이 남은 과목 배정
                            current_subject_index += 1
                            
                            # 가장 시수가 많이 남은 과목 찾기 (금요일 과목 포함)
                            max_remaining = 0
                            next_subj = None
                            
                            for subj in self.subjects:
                                remaining = subject_remaining.get(subj['code'], 0)
                                if remaining > max_remaining:
                                    max_remaining = remaining
                                    next_subj = subj
                            
                            if next_subj and max_remaining > 0:
                                next_code = next_subj['code']
                                pm_subject = {
                                    'code': next_code,
                                    'name': next_subj['name'],
                                    'total_hours': next_subj['hours'],
                                    'main_instructor': next_subj.get('main_instructor_name') or '-',
                                    'assistant_instructor': next_subj.get('assistant_instructor_name') or '-',
                                    'reserve_instructor': next_subj.get('reserve_instructor_name') or '-',
                                    'hours': 4
                                }
                                subject_remaining[next_code] -= 4
                                
                                # 이 과목을 다음날 오전에 계속 사용
                                carry_over_subject = next_subj
                                # 인덱스도 업데이트
                                current_subject_index = sorted_subjects.index(next_subj) + 1
                        
                        break
                    
                    current_subject_index += 1
                    attempts += 1
            
            # 하루 시간표 추가
            if am_subject and pm_subject:
                timetable.append({
                    'date': current_date,
                    'am_subject': am_subject,
                    'pm_subject': pm_subject
                })
            
            current_date += timedelta(days=1)
        
        return timetable
    
    def display_timetable(self, timetable):
        """시간표 테이블에 표시"""
        self.timetable_table.setRowCount(len(timetable))
        
        # 과목별 누적 시수 계산
        subject_accumulated = {}
        
        # 시작일 기준으로 주차 계산
        if timetable:
            start_date = timetable[0]['date']
        
        previous_week = None
        
        for i, entry in enumerate(timetable):
            am_subject = entry.get('am_subject', {})
            pm_subject = entry.get('pm_subject', {})
            
            # 누적 시수 계산 (오전)
            if am_subject:
                am_code = am_subject['code']
                if am_code not in subject_accumulated:
                    subject_accumulated[am_code] = 0
                subject_accumulated[am_code] += am_subject['hours']
            
            # 누적 시수 계산 (오후)
            if pm_subject:
                pm_code = pm_subject['code']
                if pm_code not in subject_accumulated:
                    subject_accumulated[pm_code] = 0
                subject_accumulated[pm_code] += pm_subject['hours']
            
            # 주차 계산 (시작일 기준)
            current_date = entry['date']
            days_diff = (current_date - start_date).days
            week_number = (days_diff // 7) + 1
            
            # 주차 표시
            week_item = QTableWidgetItem(f"{week_number}주차")
            week_item.setTextAlignment(Qt.AlignCenter)
            
            # 주차가 바뀔 때 배경색 변경으로 구분
            if previous_week is not None and week_number != previous_week:
                # 새로운 주차의 첫 번째 행 전체에 연한 회색 배경
                week_separator_color = QColor(200, 200, 200)
                week_item.setBackground(QBrush(week_separator_color))
                week_item.setFont(QFont("맑은 고딕", 11, QFont.Bold))
            else:
                # 같은 주차 내에서는 더 연한 배경
                week_item.setBackground(QBrush(QColor(245, 245, 245)))
            
            self.timetable_table.setItem(i, 0, week_item)
            previous_week = week_number
            
            # 날짜
            date_str = entry['date'].strftime("%Y-%m-%d (%a)")
            date_item = QTableWidgetItem(date_str)
            date_item.setData(Qt.UserRole, entry)  # 데이터 저장
            self.timetable_table.setItem(i, 1, date_item)
            
            # 오전 과목 표시
            if am_subject:
                am_code = am_subject['code']
                am_name = am_subject['name']
                am_total = am_subject['total_hours']
                am_accumulated = subject_accumulated.get(am_code, 0)
                
                # 과목명 축약
                if len(am_name) > 10:
                    am_short = am_name[:10] + "..."
                else:
                    am_short = am_name
                
                am_text = f"{am_short}({am_accumulated}h/{am_total}h)"
                am_item = QTableWidgetItem(am_text)
                am_item.setToolTip(f"{am_name}\n진행: {am_accumulated}h / {am_total}h")
                am_color = self.subject_colors.get(am_code, QColor(200, 200, 200))
                am_item.setBackground(QBrush(am_color))
                am_item.setTextAlignment(Qt.AlignCenter)
                self.timetable_table.setItem(i, 2, am_item)
            else:
                self.timetable_table.setItem(i, 2, QTableWidgetItem("-"))
            
            # 오후 과목 표시
            if pm_subject:
                pm_code = pm_subject['code']
                pm_name = pm_subject['name']
                pm_total = pm_subject['total_hours']
                pm_accumulated = subject_accumulated.get(pm_code, 0)
                
                # 과목명 축약
                if len(pm_name) > 10:
                    pm_short = pm_name[:10] + "..."
                else:
                    pm_short = pm_name
                
                pm_text = f"{pm_short}({pm_accumulated}h/{pm_total}h)"
                pm_item = QTableWidgetItem(pm_text)
                pm_item.setToolTip(f"{pm_name}\n진행: {pm_accumulated}h / {pm_total}h")
                pm_color = self.subject_colors.get(pm_code, QColor(200, 200, 200))
                pm_item.setBackground(QBrush(pm_color))
                pm_item.setTextAlignment(Qt.AlignCenter)
                self.timetable_table.setItem(i, 3, pm_item)
            else:
                self.timetable_table.setItem(i, 3, QTableWidgetItem("-"))
            
            # 주강사 (오전 과목 기준, 오전/오후 다르면 둘 다 표시)
            if am_subject and pm_subject:
                if am_subject['code'] == pm_subject['code']:
                    instructor_text = am_subject.get('main_instructor', '-')
                else:
                    instructor_text = f"{am_subject.get('main_instructor', '-')} / {pm_subject.get('main_instructor', '-')}"
            elif am_subject:
                instructor_text = am_subject.get('main_instructor', '-')
            elif pm_subject:
                instructor_text = pm_subject.get('main_instructor', '-')
            else:
                instructor_text = '-'
            
            main_instructor_item = QTableWidgetItem(instructor_text)
            main_instructor_item.setTextAlignment(Qt.AlignCenter)
            self.timetable_table.setItem(i, 4, main_instructor_item)
            
            # 보조강사
            if am_subject and pm_subject:
                if am_subject['code'] == pm_subject['code']:
                    assist_text = am_subject.get('assistant_instructor', '-')
                else:
                    assist_text = f"{am_subject.get('assistant_instructor', '-')} / {pm_subject.get('assistant_instructor', '-')}"
            elif am_subject:
                assist_text = am_subject.get('assistant_instructor', '-')
            elif pm_subject:
                assist_text = pm_subject.get('assistant_instructor', '-')
            else:
                assist_text = '-'
            
            assistant_instructor_item = QTableWidgetItem(assist_text)
            assistant_instructor_item.setTextAlignment(Qt.AlignCenter)
            self.timetable_table.setItem(i, 5, assistant_instructor_item)
            
            # 예비강사
            if am_subject and pm_subject:
                if am_subject['code'] == pm_subject['code']:
                    reserve_text = am_subject.get('reserve_instructor', '-')
                else:
                    reserve_text = f"{am_subject.get('reserve_instructor', '-')} / {pm_subject.get('reserve_instructor', '-')}"
            elif am_subject:
                reserve_text = am_subject.get('reserve_instructor', '-')
            elif pm_subject:
                reserve_text = pm_subject.get('reserve_instructor', '-')
            else:
                reserve_text = '-'
            
            reserve_instructor_item = QTableWidgetItem(reserve_text)
            reserve_instructor_item.setTextAlignment(Qt.AlignCenter)
            self.timetable_table.setItem(i, 6, reserve_instructor_item)
            
            # 진행도 표시 (오전 과목 기준)
            if am_subject:
                am_code = am_subject['code']
                am_total = am_subject['total_hours']
                am_accumulated = subject_accumulated.get(am_code, 0)
                progress_percent = (am_accumulated / am_total * 100) if am_total > 0 else 0
            else:
                progress_percent = 0
            
            progress_item = QTableWidgetItem(f"{progress_percent:.1f}%")
            progress_item.setTextAlignment(Qt.AlignCenter)
            self.timetable_table.setItem(i, 7, progress_item)
    
    def on_cell_clicked(self, row, column):
        """셀 클릭 시 수정 가능"""
        if not self.current_timetable or row >= len(self.current_timetable):
            return
        
        entry = self.current_timetable[row]
        
        if column in [2, 3]:  # 오전/오후 과목 - 과목 변경 (인덱스 +1)
            # 과목 선택 다이얼로그
            dialog = SubjectSelectionDialog(self.subjects, entry['subject_code'], self)
            if dialog.exec_() == QDialog.Accepted:
                new_subject_code = dialog.get_selected_subject()
                if new_subject_code:
                    # 과목 정보 업데이트
                    new_subject = next((s for s in self.subjects if s['code'] == new_subject_code), None)
                    if new_subject:
                        entry['subject_code'] = new_subject_code
                        entry['subject_name'] = new_subject['name']
                        entry['subject_hours'] = new_subject['hours']
                        entry['main_instructor'] = new_subject.get('main_instructor_name') or '-'
                        entry['assistant_instructor'] = new_subject.get('assistant_instructor_name') or '-'
                        entry['reserve_instructor'] = new_subject.get('reserve_instructor_name') or '-'
                        
                        # 테이블 전체 다시 표시 (진행도 재계산 필요)
                        self.display_timetable(self.current_timetable)
        
        elif column == 4:  # 주강사 클릭 - 예비강사와 교체 (인덱스 +1)
            if entry.get('reserve_instructor') and entry['reserve_instructor'] != '-':
                reply = QMessageBox.question(
                    self, "강사 교체", 
                    f"주강사와 예비강사를 교체하시겠습니까?\n\n주강사: {entry['main_instructor']}\n예비강사: {entry['reserve_instructor']}",
                    QMessageBox.Yes | QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    # 주강사 ↔ 예비강사 교체
                    entry['main_instructor'], entry['reserve_instructor'] = \
                        entry['reserve_instructor'], entry['main_instructor']
                    
                    # 테이블 업데이트 (인덱스 +1)
                    self.timetable_table.item(row, 4).setText(entry['main_instructor'])
                    self.timetable_table.item(row, 6).setText(entry['reserve_instructor'])
        
        elif column == 5:  # 보조강사 클릭 - 수정 (인덱스 +1)
            new_assistant, ok = QInputDialog.getText(
                self, "보조강사 수정", 
                "보조강사 이름을 입력하세요:",
                text=entry.get('assistant_instructor', '')
            )
            
            if ok:
                entry['assistant_instructor'] = new_assistant if new_assistant else '-'
                self.timetable_table.item(row, 5).setText(entry['assistant_instructor'])
        
        elif column == 6:  # 예비강사 클릭 - 주강사와 교체 (인덱스 +1)
            if entry.get('main_instructor') and entry['main_instructor'] != '-':
                reply = QMessageBox.question(
                    self, "강사 교체", 
                    f"예비강사와 주강사를 교체하시겠습니까?\n\n예비강사: {entry['reserve_instructor']}\n주강사: {entry['main_instructor']}",
                    QMessageBox.Yes | QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    # 예비강사 ↔ 주강사 교체
                    entry['reserve_instructor'], entry['main_instructor'] = \
                        entry['main_instructor'], entry['reserve_instructor']
                    
                    # 테이블 업데이트 (인덱스 +1)
                    self.timetable_table.item(row, 4).setText(entry['main_instructor'])
                    self.timetable_table.item(row, 6).setText(entry['reserve_instructor'])
    
    def save_timetable(self):
        """시간표 저장"""
        if not self.current_timetable:
            QMessageBox.warning(self, "경고", "저장할 시간표가 없습니다.")
            return
        
        try:
            # 기존 시간표 삭제 (있다면)
            delete_query = "DELETE FROM timetables WHERE course_code = %s AND type = 'lecture'"
            self.db.execute_query(delete_query, (self.selected_course,))
            
            # 새 시간표 저장
            insert_query = """
                INSERT INTO timetables 
                (course_code, subject_code, class_date, start_time, end_time, instructor_code, type)
                VALUES (%s, %s, %s, %s, %s, %s, 'lecture')
            """
            
            for entry in self.current_timetable:
                # 주강사 코드 찾기
                instructor_code = None
                main_instructor = entry.get('main_instructor', '-')
                if main_instructor and main_instructor != '-':
                    query = "SELECT code FROM instructors WHERE name = %s LIMIT 1"
                    result = self.db.fetch_one(query, (main_instructor,))
                    if result:
                        instructor_code = result['code']
                
                # 오전 시간표 저장
                self.db.execute_query(insert_query, (
                    self.selected_course,
                    entry['subject_code'],
                    entry['date'],
                    time(9, 0),
                    time(13, 0),
                    instructor_code
                ))
                
                # 오후 시간표 저장
                self.db.execute_query(insert_query, (
                    self.selected_course,
                    entry['subject_code'],
                    entry['date'],
                    time(14, 0),
                    time(18, 0),
                    instructor_code
                ))
            
            self.delete_btn.setEnabled(True)
            QMessageBox.information(self, "완료", "시간표가 저장되었습니다.")
            
        except Exception as e:
            QMessageBox.critical(self, "오류", f"시간표 저장 실패: {str(e)}")
    
    def export_excel(self):
        """Excel 내보내기"""
        if not self.current_timetable:
            QMessageBox.warning(self, "경고", "내보낼 시간표가 없습니다.")
            return
        
        try:
            from openpyxl import Workbook
            from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
            
            # 파일 저장 경로 선택
            file_path, _ = QFileDialog.getSaveFileName(
                self, "시간표 저장", f"시간표_{self.selected_course}_{datetime.now().strftime('%Y%m%d')}.xlsx",
                "Excel Files (*.xlsx)"
            )
            
            if not file_path:
                return
            
            # 워크북 생성
            wb = Workbook()
            ws = wb.active
            ws.title = "시간표"
            
            # 헤더 작성
            headers = ["주차", "날짜", "요일", "오전(09:00-13:00)", "오후(14:00-18:00)", "주강사", "보조강사", "예비강사", "진행도"]
            ws.append(headers)
            
            # 헤더 스타일
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            header_font = Font(bold=True, color="FFFFFF")
            
            for cell in ws[1]:
                cell.fill = header_fill
                cell.font = header_font
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # 과목별 누적 시수 계산
            subject_accumulated = {}
            
            # 시작일 기준
            if self.current_timetable:
                start_date = self.current_timetable[0]['date']
            
            # 데이터 작성
            for entry in self.current_timetable:
                subject_code = entry['subject_code']
                
                # 누적 시수 계산
                if subject_code not in subject_accumulated:
                    subject_accumulated[subject_code] = 0
                subject_accumulated[subject_code] += entry['hours']
                
                # 주차 계산
                current_date = entry['date']
                days_diff = (current_date - start_date).days
                week_number = (days_diff // 7) + 1
                
                date_str = entry['date'].strftime("%Y-%m-%d")
                weekday = ["월", "화", "수", "목", "금", "토", "일"][entry['date'].weekday()]
                
                subject_hours = entry.get('subject_hours', 0)
                progress_text = f"{entry['subject_name']} ({subject_accumulated[subject_code]}h/{subject_hours}h)"
                progress_percent = (subject_accumulated[subject_code] / subject_hours * 100) if subject_hours > 0 else 0
                
                row = [
                    f"{week_number}주차",
                    date_str,
                    weekday,
                    progress_text,
                    progress_text,
                    entry.get('main_instructor', '-'),
                    entry.get('assistant_instructor', '-'),
                    entry.get('reserve_instructor', '-'),
                    f"{progress_percent:.1f}%"
                ]
                ws.append(row)
                
                # 과목 색상 적용 (컬럼 인덱스 +1)
                row_idx = ws.max_row
                color = self.subject_colors.get(entry['subject_code'])
                if color:
                    hex_color = "{:02X}{:02X}{:02X}".format(color.red(), color.green(), color.blue())
                    fill = PatternFill(start_color=hex_color, end_color=hex_color, fill_type="solid")
                    ws.cell(row_idx, 4).fill = fill
                    ws.cell(row_idx, 5).fill = fill
            
            # 열 너비 조정
            ws.column_dimensions['A'].width = 10  # 주차
            ws.column_dimensions['B'].width = 15  # 날짜
            ws.column_dimensions['C'].width = 8   # 요일
            ws.column_dimensions['D'].width = 35  # 오전
            ws.column_dimensions['E'].width = 35  # 오후
            ws.column_dimensions['F'].width = 12  # 주강사
            ws.column_dimensions['G'].width = 12  # 보조강사
            ws.column_dimensions['H'].width = 12  # 예비강사
            ws.column_dimensions['I'].width = 10  # 진행도
            
            # 테두리 스타일
            border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            
            for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=9):
                for cell in row:
                    cell.border = border
                    cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # 파일 저장
            wb.save(file_path)
            QMessageBox.information(self, "완료", f"시간표가 저장되었습니다.\n{file_path}")
            
        except ImportError:
            QMessageBox.critical(self, "오류", "openpyxl 라이브러리가 필요합니다.\npip install openpyxl")
        except Exception as e:
            QMessageBox.critical(self, "오류", f"Excel 내보내기 실패: {str(e)}")
    
    def import_excel(self):
        """Excel 가져오기"""
        try:
            from openpyxl import load_workbook
            
            # 파일 선택
            file_path, _ = QFileDialog.getOpenFileName(
                self, "시간표 불러오기", "", "Excel Files (*.xlsx)"
            )
            
            if not file_path:
                return
            
            # Excel 파일 읽기
            wb = load_workbook(file_path)
            ws = wb.active
            
            # 데이터 파싱
            self.current_timetable = []
            
            for row_idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
                if not row[0]:  # 날짜가 없으면 스킵
                    continue
                
                date_str = str(row[0])
                subject_name = row[2]  # 오전 과목
                instructor_name = row[4] if len(row) > 4 else '-'
                
                # 날짜 파싱
                try:
                    if isinstance(row[0], datetime):
                        class_date = row[0].date()
                    else:
                        class_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                except:
                    continue
                
                # 과목 찾기
                subject = next((s for s in self.subjects if s['name'] == subject_name), None)
                if subject:
                    self.current_timetable.append({
                        'date': class_date,
                        'subject_code': subject['code'],
                        'subject_name': subject['name'],
                        'instructor': instructor_name,
                        'hours': 8
                    })
            
            # 테이블에 표시
            self.display_timetable(self.current_timetable)
            self.save_btn.setEnabled(True)
            self.export_btn.setEnabled(True)
            
            QMessageBox.information(self, "완료", f"{len(self.current_timetable)}개의 시간표 항목을 불러왔습니다.")
            
        except ImportError:
            QMessageBox.critical(self, "오류", "openpyxl 라이브러리가 필요합니다.\npip install openpyxl")
        except Exception as e:
            QMessageBox.critical(self, "오류", f"Excel 가져오기 실패: {str(e)}")
    
    def delete_timetable(self):
        """시간표 삭제"""
        reply = QMessageBox.question(
            self, "확인", "현재 과정의 시간표를 삭제하시겠습니까?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                delete_query = "DELETE FROM timetables WHERE course_code = %s AND type = 'lecture'"
                self.db.execute_query(delete_query, (self.selected_course,))
                
                # 테이블 초기화
                self.timetable_table.setRowCount(0)
                self.current_timetable = []
                self.save_btn.setEnabled(False)
                self.export_btn.setEnabled(False)
                self.delete_btn.setEnabled(False)
                
                QMessageBox.information(self, "완료", "시간표가 삭제되었습니다.")
                
            except Exception as e:
                QMessageBox.critical(self, "오류", f"시간표 삭제 실패: {str(e)}")


class SubjectSelectionDialog(QDialog):
    """과목 선택 다이얼로그"""
    
    def __init__(self, subjects, current_subject_code, parent=None):
        super().__init__(parent)
        self.subjects = subjects
        self.current_subject_code = current_subject_code
        self.selected_subject_code = None
        self.init_ui()
    
    def init_ui(self):
        """UI 초기화"""
        self.setWindowTitle("과목 변경")
        self.setMinimumWidth(400)
        
        layout = QVBoxLayout()
        
        # 안내 메시지
        label = QLabel("변경할 과목을 선택하세요:")
        label.setStyleSheet("font-size: 11pt; font-weight: bold;")
        layout.addWidget(label)
        
        # 과목 콤보박스
        self.subject_combo = QComboBox()
        self.subject_combo.setStyleSheet("font-size: 11pt;")
        self.subject_combo.setMinimumHeight(32)
        
        for subject in self.subjects:
            self.subject_combo.addItem(
                f"{subject['name']} ({subject['hours']}시간)",
                subject['code']
            )
            if subject['code'] == self.current_subject_code:
                self.subject_combo.setCurrentIndex(self.subject_combo.count() - 1)
        
        layout.addWidget(self.subject_combo)
        
        # 버튼
        button_box = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
        
        self.setLayout(layout)
    
    def accept(self):
        """확인 버튼"""
        self.selected_subject_code = self.subject_combo.currentData()
        super().accept()
    
    def get_selected_subject(self):
        """선택된 과목 코드 반환"""
        return self.selected_subject_code
